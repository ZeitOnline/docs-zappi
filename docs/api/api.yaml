openapi: 3.0.2
info:
  description: "This is the API description for the ZON-App (iOS and Android)"
  version: "0.3.1"
  title: "ZON App API"
  contact:
    email: "internet-technik@zeit.de"
servers:
  - url: "https://zappi.zeit.de/{version}"
    description: "Production"
    variables:
      version:
        default: "0.3.1"
        enum: # list older still available versions here
          - "0.3.1"
  - url: "https://zappi.staging.zeit.de/{version}"
    description: "Staging"
    variables:
      version:
        default: "0.3.1"
        enum:
          - "0.3.1"

paths:
  /bookmarks:
    get:
      security:
        - cookieAuthProduction: []
        - cookieAuthStaging: []
      summary: "Returns the list of bookmarks"
      tags:
        - bookmarks
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Centerpage"
          description: "Success"
        "400":
          description: "Something was wrong with the request. Check the body for error messages."
        "401":
          description: "Unauthorized"
    post:
      security:
        - cookieAuthProduction: []
        - cookieAuthStaging: []
      summary: Add a new bookmark
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref:   "#/components/schemas/UUID"
      responses:
        "204":
          description: "Saved entry to bookmarks"
        "400":
          description: "Something was wrong with the request. Check the body for error messages."
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "502":
          description: "Bad gateway"

  /bookmarks/{uuid}:
    delete:
      security:
        - cookieAuthProduction: []
        - cookieAuthStaging: []
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "204":
          description: "Deleted entry from bookmarks"
        "400":
          description: "Something was wrong with the request. Check the body for error messages."
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "502":
          description: "Bad gateway"

  /bookmarks/ids:
    get:
      security:
        - cookieAuthProduction: []
        - cookieAuthStaging: []
      summary: "Returns the list of bookmarked ids"
      tags:
        - bookmarks
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UUIDList"
          description: "Success"
        "400":
          description: "Something was wrong with the request. Check the body for error messages."
        "401":
          description: "Unauthorized"

  /config/{filename}:
    get:
      parameters:
        - in: path
          name: filename
          schema:
            type: string
          required: true
          description: "The filename of the configuration file"
      summary: |
        Provides JSON formatted configuration files. These are maintained
        via the CMS and can change independently of API releases.
        By convention, these reside in the folder
        ``https://vivi.zeit.de/repository/static/zona``
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
        "400":
          description: "No valid JSON for this resource"
        "404":
          description: "No such configuration file"

  /cp/{uuid}:
    get:
      parameters:
        - in: path
          name: uuid
          schema:
            $ref: "#/components/schemas/UUID"
          required: true
          description: "UUID from CMS that identifies a CenterPage content object"

      tags:
        - cp
      summary: "Returns the teasers (i.e. content references) on a CenterPage"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Centerpage"
        "400":
          description: "Something was wrong with the request. Check the body for error messages."
        "404":
          description: "No centerpage found for the given uuid"

  /iap/receipts/{platform}:
    post:
      parameters:
        - in: path
          name: platform
          required: true
          schema:
            $ref: "#/components/schemas/AppStoreType"
      requestBody: {
        $ref: "#/components/requestBodies/AppStoreReceipt"
      }
      security:
        - cookieAuthProduction: []
        - cookieAuthStaging: []
        - {}
      description: |
        * If no SSO cookie is supplied, the backend will create a new specially marked "platform SSO account" and
          set its cookie in the response
        * If the request contains an SSO cookie and neither its account or any other account has this
          receipt associated with it, the receipt will be associated with that account
        * If the request contains an SSO cookie that does not have this receipt associated with it but there exists
          a platform SSO account associated with that account, the platform account is merged into the "real" account
        * If the request contains the SSO cookie of an existing platform account which has already been merged into a
          "real" account, the response will have the cookie for that real account set. Clients are expected to notice the
          discrepancy and use the new cookie henceforth.
      responses:
        "204":
          description: "All is well. Enjoy those exclusive articles!"
        "400":
          description: "Something was wrong with the request. Check the body for error messages."
        "401":
          description: "No valid identities were found in the receipt."
        "502":
          description: "The payment server was not reachable."
  /search:
   get:
    tags:
      - search
    summary: "Main entry point for generic search."
    parameters:
      - in: query
        name: q
        schema:
          type: string
        required: true
        description: "The term that should be searched for"
    responses:
      "200":
        description: "Returns a list of results"
        content:
          application/json:
            schema:
              type: object
              properties:
                adControllerPageInfo:
                  $ref: "#/components/schemas/AdControllerPageInfo"
                items:
                  type: array
                  items:
                    oneOf:
                      - $ref: "#/components/schemas/CenterpageAdplace"
                      - $ref: "#/components/schemas/CenterpageTeaser"
                      - $ref: "#/components/schemas/CenterpageTeaserGallery"
                      - $ref: "#/components/schemas/CenterpageTeaserVideo"
                      - $ref: "#/components/schemas/CenterpageTeaserPodcast"
                      - $ref: "#/components/schemas/CenterpageTeaserAudio"
                      - $ref: "#/components/schemas/CenterpageModuleHTML"
                trackingData:
                  $ref: "#/components/schemas/TrackingData"
      "400":
        description: "Invalid query, see response body for details."

  /structure:
    get:
      tags:
        - structure
      summary: "Returns tab and menu/submenu configuration for the app UI"
      responses:
        "200":
          # XXX description is required, but really already exists in ..summary
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Structure"
              example: {tabs: [
                {id: start, title: Start, type: tab-centerpage, icon: home, items: [
                  {id: homepage, title: Aktuell, type: menu-item-web, url: "https://www.zeit.de/index"},
                  {id: ressortPolitik, title: Politik, type: menu-item-native, source: "{urn:uuid:b4d1e3b1-aac4-4a80-b820-e4093fe24a36}"},
                  {id: ressortGesellschaft, title: Gesellschaft, type: menu-item-native, source: "{urn:uuid:c92ad9be-67e0-497d-beee-6c2e063352cc}"},
                  {id: ressortWirtschaft, title: Wirtschaft, type: menu-item-native, source: "{urn:uuid:ea13ef02-74f3-4010-8cd7-777327fb881a}"},
                  {id: ressortWissen, title: Wissen, type: menu-item-native, source: "{urn:uuid:c84692ca-b0c9-4772-8c6b-85e2abc446e1}"},
                  {id: ressortKultur, title: Kultur, type: menu-item-native, source: "{urn:uuid:49b109f0-bbad-495e-8a88-ad91ec1ef8f9}"}
                ]},
                {id: news, title: Schlagzeilen, type: tab-centerpage, icon: clock, items: [
                  {id: newsAll, title: "Alle Schlagzeilen", type: menu-item-native, source: "{urn:uuid:08945d5e-483c-4e7b-9843-69a8f590ada9}"},
                  {id: newsMostImportant, title: "Die wichtigsten Nachrichten", type: menu-item-native, source: "{urn:uuid:df60a52c-5f4d-4804-833d-ec31e24dbd43}"},
                  {id: newsAnalysisAndReports, title: "Analysen und Hintergr√ºnde", type: menu-item-native, source: "{urn:uuid:d6913463-1804-466d-b6d0-34376ef21916}"}
                ]},
                {id: explore, title: Entdecken, type: tab-story, icon: compass, items: [
                  {id: explore-all, title: Entdecken, type: menu-item-native, source: "{urn:uuid:99ae6607-fe0f-44ad-97fb-00dd0d852c30}"}
                ]},
                {id: zplus, title: Mein Abo, type: tab-centerpage, icon: zplus, items: [
                  {id: exclusive, title: "Exklusive Artikel", type: menu-item-native, source: "{urn:uuid:0fd9480f-1b52-4fcb-942e-8089e378102e}"},
                  {id: zeitPDFWebReader, title: "DIE ZEIT", type: menu-item-web, url: "https://epaper.zeit.de/abo/diezeit"},
                  {id: wochenMarkt, title: "Wochenmarkt", type: menu-item-web, url: "https://www.zeit.de/wochenmarkt"}
                ]},
                {id: menu, title: Mehr, type: tab-menu, icon: avatar, items: [
                  {id: user-menu, title: "Mein Bereich", items: [
                    {id: reading-list, title: Merkliste, type: menu-item-app, targetId: native-reading-list},
                    {id: reading-history, title: Verlauf, type: menu-item-app, targetId: native-reading-history},
                    {id: comment-list, title: Kommentare, type: menu-item-web, url: "https://profile.zeit.de"}
                  ]},
                  {id: angebote, title: Angebote, items: [
                    {id: anzeigen, title: Anzeigen, type: menu-item-submenu, items: [
                      {id: ad1, title: Werbung, type: menu-item-web, url: "https://www.werbung.de"},
                      {id: ad2, title: Anzeige, type: menu-item-web, url: "https://www.werbung.de"},
                      {id: ad3, title: Promo, type: menu-item-web, url: "https://www.werbung.de"}
                    ]}
                  ]}
                ]}
              ]}
        "400":
          description: "Something was wrong with the request. Check the body for error messages."

  /user:
    get:
      security:
        - cookieAuthProduction: []
        - cookieAuthStaging: []
        - cookieAuthTesting: []
      tags:
        - user
      summary: "Returns information about the current user"
      responses:
        "200":
          description: "Information about the currently logged in user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        "400":
          description: "Something was wrong with the request. Check the body for error messages."
        "401":
          description: "The user is not logged in"
components:
  requestBodies:
    AppStoreReceipt:
      content:
        "text/plain": {
          "schema": {
            "$ref": "#/components/schemas/AppStoreReceipt"
          }
        }
  schemas:

    UUID:
      type: string
      pattern: "^((\\{urn:uuid:)?([a-f0-9]{8})(-[a-f0-9]{4}){3}(-[a-f0-9]{12})\\}?|[-a-z0-9/]+)$"
      description: "CMS UUID that denotes a content object. For testing/development, a CMS path is also accepted."
      example: "{urn:uuid:d995ba5a-a7fb-401a-bdc8-86cf2cbf0cda} or d995ba5a-a7fb-401a-bdc8-86cf2cbf0cda"

    UUIDList:
      type: array
      items:
        $ref: "#/components/schemas/UUID"

    Structure:
      type: object
      properties:
        tabs:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/TabCenterpage"
              - $ref: "#/components/schemas/TabMenu"
              - $ref: "#/components/schemas/TabStory"

    Centerpage:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        url:
          type: string
          # format: uri  XXX only supported in openapi-3.1
          description: "Web URL for this CenterPage"
          example: "https://www.zeit.de/politik/index"
        pagetitle:
          type: string
        bookmarkable:
          type: boolean
          example: true
        adControllerPageInfo:
          $ref: "#/components/schemas/AdControllerPageInfo"
        trackingData:
          $ref: "#/components/schemas/TrackingData"
        items:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/CenterpageRegion"
              - $ref: "#/components/schemas/CenterpageArea"
              - $ref: "#/components/schemas/CenterpageTeaser"
              - $ref: "#/components/schemas/CenterpageTeaserGallery"
              - $ref: "#/components/schemas/CenterpageTeaserVideo"
              - $ref: "#/components/schemas/CenterpageTeaserPodcast"
              - $ref: "#/components/schemas/CenterpageTeaserAudio"
              - $ref: "#/components/schemas/CenterpageModuleHTML"
              - $ref: "#/components/schemas/CenterpageAdplace"
              - $ref: "#/components/schemas/CenterpageHeader"
              - $ref: "#/components/schemas/CenterpageMarkup"

    CenterpageElementId:
      type: string
      pattern: "^id-[-a-f0-9]+$"
      description: "ID of the cp element"
      example: "id-fcfd3deb-4c26-472b-8bdd-238372d5131b"

    CenterpageElementType:
      type: string
      enum:
        - region
        - area
        - adplace
        - teaser
        - teaser-gallery
        - teaser-video
        - teaser-podcast
        - teaser-audio
        - html
        - header
        - markup
      description: "Type of the cp element"

    AdControllerPageInfo:
      type: object
      properties:
        doc:
          type: string
          nullable: true
          description: "page type"
          enum:
            - homepage
            - index
            - artikel
            - bildgal
            - null
          example: "index"
        level2:
          description: "Level2 property ressort for adplacement"
          type: string
          example: "politik"
        level3:
          description: "Level3 property subressort, name of podcast or series for adplacement"
          type: string
          example: "deutschland"
        keywords:
          type: string
          example: "zeitonline,coronavirus,frankreich,lockdown"


    Image:
      type: object
      nullable: true
      properties:
        baseUrl:
          type: string
          # format: uri
          example: "https://img.zeit.de/2020-08/flightradar-4"
          description: |
            The URL is a base URL, which needs to be modified with the following query parameters in order to produce an actual image:

              - ``variant``, required; denotes the socalled variant by name. It can be replaced by any of the [variants defined here](https://www.zeit.de/data/image-variants.xml):
                  - cinema (7:3)
                  - default (1:1)
                  - narrow (2:3)
                  - original (aspect ratio of the original image, original dimensions.)
                  - panorama (7:2)
                  - portrait (3:4)
                  - square (1:1)
                  - square-padded (1:1 - cropped with padding to be used as podcast covers)
                  - standard (4:3)
                  - stripe (49:4)
                  - super (3:2)
                  - tile (4:5)
                  - wide (16:9 - standard teaser variant)
              - ``width`` and ``height`` in pixels. The returned image will fit inside the bounding box
              - ``scale`` is a float between 0.5 and 3.0 that denotes the zoom factor by which the image is enlarged *after* the viewport and size has been determined (otherwise it could simply be replaced by requesting a larger size)
              - ``fill`` is a string denoting a web color that transparent images will be filled with
              - ``viewport`` is a string of either ``desktop`` or ``mobile``

            Note that simply calling the base url itself will return a 404 to avoid careless, accidental retrieval of the original image sizes

        fillColor:
          type: string
          nullable: true
          example: "8ed8a6"
        visibleMobile:
          type: boolean
          example: false

    TrackingData:
      type: object
      properties:
        contentId:
          type: string
          description: "Content-ID containing [Unit].[Ressort].[Subressort].[Cluster].[Pagetype].[Sourcetype]|[URL without protocol]"
          example: "redaktion.politik.deutschland..centerpage.zede|www.zeit.de/politik/deutschland/index"
        contentGroup:
          $ref: "#/components/schemas/TrackingContentGroup"
        customParameter:
          $ref: "#/components/schemas/TrackingCustomParameter"

    TrackingContentGroup:
      type: object
      description: "Content groups for aggregation"
      properties:
        1:
          type: string
          description: "Unit"
          example: "redaktion"
        2:
          type: string
          description: "Pagetype"
          example: "centerpage"
        3:
          type: string
          description: "Ressort"
          example: "politik"
        4:
          type: string
          description: "Sourcetype"
          example: "zede"
        5:
          type: string
          description: "Subressort"
          example: "deutschland"
        6:
          type: string
          description: "Cluster (series name)"
          example: "allesgesagt?"
        7:
          type: string
          description: "Basename"
          example: "index"
        8:
          type: string
          description: "Banner-Channel"
          example: "politik/deutschland/centerpage"
        9:
          type: string
          description: "Date first released"
          example: "2019-06-12"

    TrackingCustomParameter:
      type: object
      description: "Custom page parameter"
      properties:
        2:
          type: string
          description: "IVW-Code"
          example: "politik/deutschland/bild-text"
        3:
          type: string
          description: "Pagination"
          example: "1/1"
        4:
          type: string
          description: "Keywords separated by semicolons"
          example: "politik;deutschland"
        5:
          type: string
          description: "Date last published"
          example: "2019-06-12 15:21:44.350769+02:00"
        8:
          type: string
          description: "Product-ID"
          example: "zede"
        9:
          type: string
          description: "Banner-Channel"
          example: "politik/deutschland/centerpage"
        10:
          type: string
          description: "Banner active (advertising enabled)"
          enum:
            - "yes"
            - "no"
          example: "yes"
        25:
          type: string
          description: "Plattform"
          example: "original"
        26:
          type: string
          description: "Detailed Content-Type"
          example: "centerpage.centerpage"
        28:
          type: string
          description: "Access"
          enum:
            - free
            - registration
            - dynamic
            - abo
          example: "free"
        29:
          type: string
          description: "First Click Free"
          enum:
            - "yes"
            - "no"
            - unfeasible
          example: "unfeasible"
        30:
          type: string
          description: "Paywall Status"
          enum:
            - open
            - register
            - metered
            - paid
          example: "open"
        38:
          type: string
          description: "Channels separated by semicolons"
          example: "podcast;kultur;film"

    CustomClickParameter:
      type: object
      description: "Custom click parameter"
      properties:
        5:
          type: string
          description: "Area"
          example: "headed-zplus"
        6:
          type: string
          description: "Row"
          example: "1"
        7:
          type: string
          description: "Column"
          example: "4"
        8:
          type: string
          description: "Subcolumn"
          example: "zon-teaser-standard"

    AudioConnection:
      type: object
      properties:
        id:
          type: string
          enum:
            - itunes
            - spotify
            - alexa
            - google
            - zeitaudio
        url:
          type: string
          # format: uri
          example: "https://podcasts.apple.com/podcast/id1279335230"

    CenterpageElement:
      required:
        - type
      properties:
        id:
          $ref: "#/components/schemas/CenterpageElementId"
        type:
          $ref: "#/components/schemas/CenterpageElementType"

    CenterpageTeaserBase:
      description: "A teaser module references/represents a content object (article, video, etc.)"
      allOf:
        - $ref: "#/components/schemas/CenterpageElement"
        - required:
            - layout
            - title
            - url
            - dateFirstPublished
            - dateLastPublishedSemantic
          properties:
            layout:
              type: string
              # @check https://vivi.zeit.de/repository/data/cp-layouts.xml
              enum:
                - zon-teaser-classic
                - zon-teaser-cover
                - zon-teaser-panorama
                - zon-teaser-link
                - zon-teaser-list
                - zon-teaser-podcast-small
                - zon-teaser-podcast-small-plus
                - zon-teaser-printbox
                - zon-teaser-upright
                - zon-teaser-small
                - zon-teaser-small-compact
                - zon-teaser-square
                - zon-teaser-square-compact
                - zon-teaser-standard
                - zon-teaser-standard-compact
                - zon-teaser-stripe
                - zon-teaser-wide
              description: "How to display this teaser (e.g large/small)"
            title:
              type: string
              description: "Main title of the article"
              example: "My Article Title"
            supertitle:
              type: string
              nullable: true
              description: "The supertitle/kicker are 1-2 keywords that denote the context/topic of the article"
              example: "Olympics"
            text:
              type: string
              nullable: true
              description: "Teaser text is a few sentences that summarize/introduce the article"
              example: "This is the teaser text\nIt may contain line breaks."
            url:
              type: string
              # format: uri
              example: "https://www.zeit.de/my/article"
            uuid:
              $ref: "#/components/schemas/UUID"
            image:
              $ref: "#/components/schemas/Image"
            authorImage:
              $ref: "#/components/schemas/Image"
            dateFirstPublished:
              type: string
              format: date-time
              description: "Timestamp when the article was published initially"
              example: "2019-12-31T13:12:00Z"
            dateLastPublishedSemantic:
              type: string
              format: date-time
              description: "Timestamp of the most recent semantic/relevant update to the article"
              example: "2020-01-01T13:12:00Z"
            date:
              type: string
              nullable: true
              description: "Human readable relative or absolute date"
              example: "Vor 3 Stunden"
            byline:
              type: string
              nullable: true
              description: "Ready-made string that contains the author names and maybe some more information like the article genre"
              example: "Eine Glosse von August Weythershau√üen, Erzgebirge"
            badges:
              type: array
              items:
                type: string
                enum:
                  - liveblog
                  - liveblog-closed
                  - livestream
                  - wiwo
                  - zett
                  - zplus
                  - zplus-register
                  - zplus-dynamic
                  - zplus-spiele
              description: "List of icon IDs that should be displayed for this teaser"
              example: ["zplus"]
            label:
              type: string
              # ZON-6127: disabled until the implementation catches up:
              # enum:
              #   - Anzeige
              #   - Verlagsangebot
              description: "Additional label to mark teasers with corporate advertising"
              example: "Verlagsangebot"
            comments:
              type: object
              properties:
                label:
                  type: string
                  description: "Descriptive label for count of comments for this article"
                  example: "18 Kommentare"
                url:
                  type: string
                  # format: uri
                  description: "URL directly to the comment area of the article"
                  example: "https://www.zeit.de/my/article#comments"
            bookmarkable:
              type: boolean
              example: true
            trackingData:
              type: object
              properties:
                customClickParameter:
                  $ref: "#/components/schemas/CustomClickParameter"
    CenterpageTeaser:
      description: "A teaser module references/represents an article content object"
      allOf:
        - $ref: "#/components/schemas/CenterpageTeaserBase"
        - properties:
            type:
              type: string
              enum:
                - teaser
              example: "teaser"
    CenterpageTeaserGallery:
      description: "A teaser module references/represents a gallery content object"
      allOf:
        - $ref: "#/components/schemas/CenterpageTeaserBase"
        - required:
            - gallery
          properties:
            type:
              type: string
              enum:
                - teaser-gallery
              example: "teaser-gallery"
            gallery:
              type: object
              properties:
                label:
                  type: string
                  description: "Label to display gallery content"
                  example: "18 Bilder"
    CenterpageTeaserVideo:
      description: "A teaser module references/represents a video content object"
      allOf:
        - $ref: "#/components/schemas/CenterpageTeaserBase"
        - required:
            - video
          properties:
            type:
              type: string
              enum:
                - teaser-video
              example: "teaser-video"
            video:
              type: object
              properties:
                id:
                  type: string
                  example: "6194436097001"
                hasAdvertisement:
                  type: boolean
                # provider: "brightcove"
                # product-id:
                # page-url:
                # series: serienname
    CenterpageTeaserPodcast:
      description: "A teaser module references/represents an article content object with audio (podigee podcast)"
      allOf:
        - $ref: "#/components/schemas/CenterpageTeaserBase"
        - required:
            - audio
          properties:
            type:
              type: string
              enum:
                - teaser-podcast
              example: "teaser-podcast"
            audio:
              type: object
              properties:
                color:
                  type: string
                  nullable: true
                  example: "8ed8a6"
                duration:
                  type: string
                  example: "-00:05:23"
                url:
                  type: string
                  # format: uri
                  description: "URL directly to the audio source"
                  example: "https://cdn.podigee.com/media/podcast_17255_unter_pfarrerstochtern_episode_214511_die_opferung_des_isaak.mp3?v=1588876957&source=webplayer"
                connections:
                  type: array
                  items:
                    $ref: "#/components/schemas/AudioConnection"
            episodeImage:
              $ref: "#/components/schemas/Image"
            seriesImage:
              $ref: "#/components/schemas/Image"
    CenterpageTeaserAudio:
      description: "A teaser module references/represents an article content object with premium audio"
      allOf:
        - $ref: "#/components/schemas/CenterpageTeaserBase"
        - required:
            - audio
          properties:
            type:
              type: string
              enum:
                - teaser-audio
              example: "teaser-audio"
            audio:
              type: object
              properties:
                color:
                  type: string
                  nullable: true
                  example: "b91109"
                duration:
                  type: string
                  example: "-00:05:23"
                url:
                  type: string
                  # format: uri
                  description: "URL directly to the audio source"
                  example: "https://premium.zeit.de/system/files/DZ/2021/19/audio/19_italien_8842307_8635853_dl.mp3"
            episodeImage:
              $ref: "#/components/schemas/Image"
            seriesImage:
              $ref: "#/components/schemas/Image"
    CenterpageModuleHTML:
      description: "A non-native module that should be displayed via a web view"
      allOf:
        - $ref: "#/components/schemas/CenterpageElement"
        - required:
            - content
          properties:
            type:
              type: string
              enum:
                - html
              example: "html"
            content:
              type: string
              format: html
              example: "<embed>Anything can happen here.</embed>"
    CenterpageAreaBase:
      description: "CenterPages contain areas, which in turn contain modules"
      allOf:
        - $ref: "#/components/schemas/CenterpageElement"
        - required:
            - layout
            - link
            - title
            - items
          properties:
            layout:
              type: string
            link:
              type: string
              nullable: true
              # format: uri
              description: "A section often links to topic pages etc."
              example: "https://www.zeit.de/thema/coronavirus"
            title:
              type: string
              nullable: true
              example: "This is a simple title"
            items:
              type: array
    CenterpageRegion:
      allOf:
        - $ref: "#/components/schemas/CenterpageAreaBase"
        - properties:
            type:
              type: string
              enum:
                - region
              example: "region"
            layout:
              type: string
              enum:
                - duo
                - standard
                - tablist
            items:
              type: array
              items:
                $ref: "#/components/schemas/CenterpageArea"
    CenterpageArea:
      allOf:
        - $ref: "#/components/schemas/CenterpageAreaBase"
        - properties:
            type:
              type: string
              enum:
                - area
              example: "area"
            layout:
              type: string
              enum:
                - duo
                - headed
                - headed-light
                - headed-fixed-height
                - link-list
                - podcast-episode-list
                - podcast-grid
                - standard
                - standard-headed
                - story
                - tab
                - tabpanel
            items:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/CenterpageTeaser"
                  - $ref: "#/components/schemas/CenterpageTeaserGallery"
                  - $ref: "#/components/schemas/CenterpageTeaserVideo"
                  - $ref: "#/components/schemas/CenterpageTeaserPodcast"
                  - $ref: "#/components/schemas/CenterpageTeaserAudio"
                  - $ref: "#/components/schemas/CenterpageModuleHTML"
            trackingData:
              type: object
              properties:
                customClickParameter:
                  $ref: "#/components/schemas/CustomClickParameter"
    CenterpageAdplace:
      description: "Placeholder for advertisement"
      required:
        - device
        - tile
      properties:
          type:
            type: string
            enum:
              - adplace
          tile:
            description: "IQD ad tile number"
            type: string
          device:
            type: string
            enum:
              - desktop
              - mobile
    CenterpageHeader:
      description: "Header for native centerpages"
      required:
        - type
        - title
      properties:
        id:
          $ref: "#/components/schemas/CenterpageElementId"
        type:
          type: string
          enum:
            - header
        image:
          $ref: "#/components/schemas/Image"
        supertitle:
          type: string
          nullable: true
        title:
          type: string
    CenterpageMarkup:
      description: "A list of text"
      required:
        - type
        - text
      properties:
        id:
          $ref: "#/components/schemas/CenterpageElementId"
        type:
          type: string
          enum:
            - markup
        title:
          type: string
        text:
          type: string

    TabBase:
      required:
        - id
        - title
        - type
        - icon
        - items
      properties:
        id:
          type: string
          description: "ID of the tab"
          example: "justsomeuniquestring"
        title:
          type: string
          minLength: 1
          maxLength: 15
          example: "Start"
        type:
          type: string
          enum:
            - tab-centerpage
            - tab-menu
            - tab-story
        icon:
          type: object
          properties:
            ios:
              type: string
              description: "SF Symbol name"
              example: "bookmark"
            android:
              type: string
              description: "Material Design Icon name"
              example: "bookmarks"
        visible-from:
          type: string
          description: "Time when the tab becomes visible in the app"
          example: "DAY=MO;TIME=00:00:00"
        visible-to:
          type: string
          description: "Time when the tab becomes invisible in the app"
          example: "DAY=FR;TIME=16:00:00"
        items:
          type: array
    TabCenterpage:
      allOf:
        - $ref: "#/components/schemas/TabBase"
        - properties:
            type:
              type: string
              enum:
                - tab-centerpage
              example: "tab-centerpage"
            items:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/MenuItemNative"
                  - $ref: "#/components/schemas/MenuItemWeb"
    TabStory:
      allOf:
        - $ref: "#/components/schemas/TabBase"
        - properties:
            type:
              type: string
              enum:
                - tab-story
              example: "tab-story"
            items:
              type: array
              items:
                $ref: "#/components/schemas/MenuItemNative"
    TabMenu:
      allOf:
        - $ref: "#/components/schemas/TabBase"
        - properties:
            type:
              type: string
              enum:
                - tab-menu
              example: "tab-menu"
            items:
              type: array
              items:
                $ref: "#/components/schemas/MenuSection"

    MenuSection:
      properties:
        id:
          type: string
          example: "menu-section-1"
        title:
          type: string
          example: "My section"
        items:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/MenuItemNative"
              - $ref: "#/components/schemas/MenuItemApp"
              - $ref: "#/components/schemas/MenuItemWeb"
              - $ref: "#/components/schemas/MenuItemBrowser"
              - $ref: "#/components/schemas/MenuItemSubMenu"

    MenuItemBase:
      required:
        - id
        - title
        - type
      properties:
        id:
          type: string
          example: "menu-entry1"
        title:
          type: string
          example: "Menu Entry Title"
        type:
          type: string
          enum:
            - menu-item-native
            - menu-item-app
            - menu-item-web
            - menu-item-browser
            - menu-item-submenu
        icon:
          type: object
          properties:
            ios:
              type: string
              description: "SF Symbol name"
              example: "bookmark"
            android:
              type: string
              description: "Material Design Icon name"
              example: "bookmarks"
    MenuItemNative:
      allOf:
        - $ref: "#/components/schemas/MenuItemBase"
        - required:
            - source
          properties:
            type:
              type: string
              enum:
                - menu-item-native
              example: "menu-item-native"
            source:
              $ref: "#/components/schemas/UUID"
    MenuItemApp:
      allOf:
        - $ref: "#/components/schemas/MenuItemBase"
        - required:
            - targetId
          properties:
            type:
              type: string
              enum:
                - menu-item-app
              example: "menu-item-app"
            targetId:
              type: string
              example: "some-app-id"
    MenuItemWeb:
      allOf:
        - $ref: "#/components/schemas/MenuItemBase"
        - required:
            - url
          properties:
            url:
              type: string
              # format: uri
              example: "https://www.zeit.de/some/webviewurl"
            type:
              type: string
              enum:
                - menu-item-web
              example: "menu-item-web"
    MenuItemBrowser:
      allOf:
        - $ref: "#/components/schemas/MenuItemBase"
        - required:
            - url
          properties:
            url:
              type: string
              # format: uri
              example: "https://www.zeit.de/some/browserurl"
            type:
              type: string
              enum:
                - menu-item-browser
              example: "menu-item-browser"
    MenuItemSubMenu:
      allOf:
        - $ref: "#/components/schemas/MenuItemBase"
        - required:
            - items
          properties:
            type:
              type: string
              enum:
                - menu-item-submenu
            items:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/MenuItemNative"
                  - $ref: "#/components/schemas/MenuItemApp"
                  - $ref: "#/components/schemas/MenuItemWeb"
                  - $ref: "#/components/schemas/MenuItemBrowser"

    AppStoreType:
      type: string
      description: which store the receipt originated from
      enum:
        - apple_appstore
        - google_playstore
        - dummy_appstore
    AppStoreReceipt:
      type: string
      description: |
        base64 encoded representation of the app store receipt.
        In the case of the Apple Appstore, this is simply the verbatim token that the Client
        has received from the store.
        In the case of the Google Playstore clients must send the base64 encoded representation
        of a JSON array with the following key/values:
          - ``original_json``: a JSON string of the verbatim result of calling the ``getOriginalJson()``
            method on the receipt object that the Android API provides as return value for the transaction
            of buying a product in the Google Playstore.
          - ``signature``: a base64 encoded String that represents the output of calling ``getSignature()``
            on the abovementioned object.
    UserInfo:
      properties:
        ssoid:
          type: integer
        name:
          type: string
          description: username
          nullable: true
        firstname:
          type: string
          nullable: true
        lastname:
          type: string
          nullable: true
        avatar:
          type: string
          description: URL to the image
          nullable: true
        subscriptions:
          type: array
          nullable: true
          description: |
            Which subscriptions does the current user have?
            - "pur": the user should not be tracked and should not
              see any ads
            - "digital": the user should be able to see all Z+ content
          items:
            type: string
            enum:
              - pur
              - digital
        adControllerUserGroup:
          type: string
          nullable: true
          description: |
            Extra parameter to identify
            - "iqdpremium": user has abo
            - "iqdpremium_registered": user is registered user

  securitySchemes:
    default:
      type: http
      scheme: basic
    cookieAuthProduction:
      type: apiKey
      in: cookie
      name: zeit_sso_201501
    cookieAuthStaging:
      type: apiKey
      in: cookie
      name: zeit_staging_sso_201501
    cookieAuthTesting:
      type: apiKey
      in: cookie
      name: my_sso_cookie
